@page "/messages"
@page "/messages/{otherUserId}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject ProtectedSessionStorage ProtectedSessionStorage
@rendermode InteractiveServer

<div class="container-fluid mt-4" dir="rtl">
    @if (userId == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">טוען...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Conversations List -->
            <div class="col-md-4 border-end">
                <div class="conversations-list">
                    <h4 class="mb-3">שיחות</h4>
                    @foreach (var conversation in conversations)
                    {
                        <div class="conversation-item @(selectedUserId == conversation.UserId.ToString() ? "active" : "")"
                             @onclick="() => SelectConversation(conversation.UserId)">
                            <div class="d-flex align-items-center">
                                <img src="/images/default-profile.svg" alt="@conversation.Username" class="rounded-circle me-2" style="width: 40px; height: 40px;" />
                                <div>
                                    <div class="fw-bold">@conversation.Username</div>
                                    <div class="text-muted small">@conversation.FullName</div>
                                    <div class="text-muted smaller">@FormatDate(conversation.LastMessageDate)</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Chat Area -->
            <div class="col-md-8">
                @if (selectedUserId != null)
                {
                    <div class="chat-container d-flex flex-column" style="height: calc(100vh - 100px);">
                        <!-- Chat Header -->
                        <div class="chat-header p-3 border-bottom">
                            <div class="d-flex align-items-center">
                                <img src="/images/default-profile.svg" alt="@selectedConversation?.Username" class="rounded-circle me-2" style="width: 40px; height: 40px;" />
                                <div>
                                    <div class="fw-bold">@selectedConversation?.Username</div>
                                    <div class="text-muted small">@selectedConversation?.FullName</div>
                                </div>
                            </div>
                        </div>

                        <!-- Messages -->
                        <div class="chat-messages flex-grow-1 p-3 overflow-auto" @ref="messagesContainer">
                            @foreach (var message in messages)
                            {
                                <div class="message @(message.SenderId.ToString() == userId ? "sent" : "received")">
                                    <div class="message-content">
                                        @message.MessageText
                                        <div class="message-time small">
                                            @message.SentDate.ToString("HH:mm")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Message Input -->
                        <div class="chat-input p-3 border-top">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="הקלד הודעה..."
                                       @bind="newMessage" @bind:event="oninput"
                                       @onkeypress="HandleKeyPress" />
                                <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(newMessage)">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center mt-5 text-muted">
                        <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                        <h4 class="mt-3">בחר שיחה כדי להתחיל</h4>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .conversations-list {
        height: calc(100vh - 100px);
        overflow-y: auto;
    }

    .conversation-item {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        cursor: pointer;
    }

    .conversation-item:hover {
        background-color: #f8f9fa;
    }

    .conversation-item.active {
        background-color: #e9ecef;
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 70%;
        margin-bottom: 1rem;
        display: flex;
    }

    .message.sent {
        margin-left: auto;
    }

    .message.received {
        margin-right: auto;
    }

    .message-content {
        padding: 0.5rem 1rem;
        border-radius: 1rem;
        position: relative;
    }

    .message.sent .message-content {
        background-color: #0d6efd;
        color: white;
        border-bottom-right-radius: 0.25rem;
    }

    .message.received .message-content {
        background-color: #f1f1f1;
        border-bottom-left-radius: 0.25rem;
    }

    .message-time {
        font-size: 0.75rem;
        margin-top: 0.25rem;
        opacity: 0.8;
    }

    .smaller {
        font-size: 0.75rem;
    }
</style>

@code {
    [Parameter]
    public string? OtherUserId { get; set; }

    private string? userId;
    private string? selectedUserId;
    private List<ConversationResponse> conversations = new();
    private List<MessageResponse> messages = new();
    private string newMessage = "";
    private ElementReference messagesContainer;
    private System.Threading.Timer? refreshTimer;

    private ConversationResponse? selectedConversation =>
        conversations.FirstOrDefault(c => c.UserId.ToString() == selectedUserId);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userIdResult = await ProtectedSessionStorage.GetAsync<string>("userId");
            if (userIdResult.Success && !string.IsNullOrEmpty(userIdResult.Value))
            {
                userId = userIdResult.Value;
                await LoadConversations();

                if (!string.IsNullOrEmpty(OtherUserId))
                {
                    await SelectConversation(int.Parse(OtherUserId));
                }

                // Set up refresh timer
                refreshTimer = new System.Threading.Timer(
                    async _ => await InvokeAsync(RefreshMessages),
                    null,
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(5)
                );
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }

        await ScrollToBottom();
    }

    private async Task LoadConversations()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("API");
            conversations = await client.GetFromJsonAsync<List<ConversationResponse>>($"api/message/conversations/{userId}") ?? new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בטעינת השיחות: {ex.Message}");
        }
    }

    private async Task SelectConversation(int otherUserId)
    {
        selectedUserId = otherUserId.ToString();
        await LoadMessages();
        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        if (selectedUserId == null) return;

        try
        {
            var client = HttpClientFactory.CreateClient("API");
            messages = await client.GetFromJsonAsync<List<MessageResponse>>($"api/message/chat/{userId}/{selectedUserId}") ?? new();
            StateHasChanged();
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בטעינת ההודעות: {ex.Message}");
        }
    }

    private async Task RefreshMessages()
    {
        if (selectedUserId != null)
        {
            await LoadMessages();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || selectedUserId == null) return;

        try
        {
            var client = HttpClientFactory.CreateClient("API");
            var request = new SendMessageRequest
            {
                SenderId = int.Parse(userId!),
                ReceiverId = int.Parse(selectedUserId),
                MessageText = newMessage
            };

            var response = await client.PostAsJsonAsync("api/message", request);
            if (response.IsSuccessStatusCode)
            {
                newMessage = "";
                await LoadMessages();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בשליחת ההודעה: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage))
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch { }
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalDays < 1)
        {
            return date.ToString("HH:mm");
        }
        else if (diff.TotalDays < 7)
        {
            return date.ToString("dddd");
        }
        else
        {
            return date.ToString("dd/MM/yyyy");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private class ConversationResponse
    {
        public int UserId { get; set; }
        public string Username { get; set; } = "";
        public string FullName { get; set; } = "";
        public DateTime LastMessageDate { get; set; }
    }

    private class MessageResponse
    {
        public int MessageId { get; set; }
        public int SenderId { get; set; }
        public int ReceiverId { get; set; }
        public string MessageText { get; set; } = "";
        public DateTime SentDate { get; set; }
        public bool IsRead { get; set; }
    }

    private class SendMessageRequest
    {
        public int SenderId { get; set; }
        public int ReceiverId { get; set; }
        public string MessageText { get; set; } = "";
    }
} 