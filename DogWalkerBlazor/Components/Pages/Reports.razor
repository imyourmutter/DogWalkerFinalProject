@page "/reports"
@using DogWalkerBlazor.Utilities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<div class="container mt-4" dir="rtl">
    @if (userId == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">טוען...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>@(userRole == 4 ? "מרכז דיווחים" : "הדיווחים שלי")</h2>
                    <div>
                        <select class="form-select" @onchange="@(e => OnStatusFilterChanged(e.Value?.ToString()))">
                            <option value="">כל הסטטוסים</option>
                            <option value="pending">ממתין</option>
                            <option value="accepted">אושר</option>
                            <option value="denied">נדחה</option>
                        </select>
                    </div>
                </div>

                @if (reports.Any())
                {
                    <div class="row">
                        @foreach (var report in reports)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">
                                                דיווח על @report.ReportedName
                                            </h5>
                                            <span class="badge @GetStatusBadgeClass(report.Status)">
                                                @GetStatusText(report.Status)
                                            </span>
                                        </div>

                                        @if (userRole == 4)
                                        {
                                            <div class="mb-2">
                                                <strong>מדווח:</strong>
                                                <button class="btn btn-link p-0" @onclick="() => ViewProfile(report.ReporterId)">
                                                    @report.ReporterName
                                                </button>
                                            </div>
                                            <div class="mb-2">
                                                <strong>מדווח עליו:</strong>
                                                <button class="btn btn-link p-0" @onclick="() => ViewProfile(report.ReportedId)">
                                                    @report.ReportedName
                                                </button>
                                            </div>
                                        }

                                        <p class="card-text">@report.Description</p>
                                        <div class="text-muted small mb-3">
                                            <i class="bi bi-calendar"></i> @report.ReportDate.ToString("dd/MM/yyyy HH:mm")
                                        </div>

                                        @if (userRole == 4 && report.Status == "pending")
                                        {
                                            <div class="btn-group">
                                                <button class="btn btn-success btn-sm" @onclick="@(() => UpdateStatus(report.ReportId, "accepted"))">
                                                    <i class="bi bi-check-lg"></i> אשר
                                                </button>
                                                <button class="btn btn-danger btn-sm" @onclick="@(() => UpdateStatus(report.ReportId, "denied"))">
                                                    <i class="bi bi-x-lg"></i> דחה
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        אין דיווחים להצגה
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string? userId;
    private int userRole;
    private List<ReportResponse> reports = new();
    private bool isLoaded = false;
    private string? selectedStatus;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoaded)
        {
            isLoaded = true;
            try
            {
                var client = HttpClientFactory.CreateClient("API");
                var userIdResult = await ProtectedSessionStorage.GetAsync<string>("userId");
                if (userIdResult.Success && !string.IsNullOrEmpty(userIdResult.Value))
                {
                    userId = userIdResult.Value;
                    var roleResponse = await client.GetAsync($"api/user/role/{userId}");
                    if (roleResponse.IsSuccessStatusCode)
                    {
                        userRole = await roleResponse.Content.ReadFromJsonAsync<int>();
                        StateHasChanged();
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/login");
                    return;
                }

                await LoadReports();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בטעינת הדיווחים: {ex.Message}");
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task LoadReports()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("API");
            var endpoint = userRole == 4 ? "api/report/all" : $"api/report/by/{userId}";
            
            if (!string.IsNullOrEmpty(selectedStatus) && selectedStatus != "")
            {
                endpoint += $"?status={selectedStatus}";
            }

            var response = await client.GetAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                reports = await response.Content.ReadFromJsonAsync<List<ReportResponse>>() ?? new();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", error);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בטעינת הדיווחים: {ex.Message}");
        }
    }

    private async Task OnStatusFilterChanged(string? status)
    {
        selectedStatus = status;
        await LoadReports();
    }

    private async Task UpdateStatus(int reportId, string newStatus)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("API");
            var request = new { Status = newStatus };
            var response = await client.PutAsJsonAsync($"api/report/{reportId}/status", request);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadReports();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", error);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"שגיאה בעדכון סטטוס הדיווח: {ex.Message}");
        }
    }

    private void ViewProfile(int userId)
    {
        NavigationManager.NavigateTo($"/view-profile/{userId}");
    }

    private string GetStatusBadgeClass(string status) => status.ToLower() switch
    {
        "pending" => "bg-warning",
        "accepted" => "bg-success",
        "denied" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetStatusText(string status) => status.ToLower() switch
    {
        "pending" => "ממתין",
        "accepted" => "אושר",
        "denied" => "נדחה",
        _ => status
    };

    private class ReportResponse
    {
        public int ReportId { get; set; }
        public int ReporterId { get; set; }
        public int ReportedId { get; set; }
        public string ReporterName { get; set; } = "";
        public string ReportedName { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime ReportDate { get; set; }
        public string Status { get; set; } = "";
    }
} 